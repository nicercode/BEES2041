---
title: "Week 3 Linear Models"
---

## Week 3: Linear Models

Follow along with the Moodle quiz in this Quarto document.

Load packages:

```{r}
library(tidyverse)

library(easystats)

#library(parameters)
#library(performance)
#library(report)
#library(modelbased)

```

## Size of pest populations vs temperature:

**Q3:**

```{r}
# read in data 
data_insect <- read_csv("data/Insect_population_temp.csv") %>% distinct()

# Filter to Population A
data_pop_a <- filter(data_insect, population == "a")

# Create linear model for response and predictor variables
popA.lm <- lm(abundance ~ temperature, data = data_pop_a)

# parameters
model_parameters(popA.lm)

# Partitioning of variance
anova(popA.lm)

# Report
report_model(popA.lm)

# For visualisation
data_fitted <- estimate_prediction(popA.lm)   
plot(data_fitted)
```

**Q4:**

```{r}
# filter the data
data_pop_b <- filter(data_insect, population == "b")

# create linear model for response and predictor variables
popB.lm <- lm(abundance ~ temperature, data = data_pop_b)

# parameters
model_parameters(popB.lm)

# Partitioning of variance
anova(popB.lm)
```


## Freestyle Swimming Records

Read in data and produce a scatter plot of Winning time versus Year

**Q9:**

```{r}
# read in data 
data_swim_records <- read_csv("data/Swim.records.csv")

# create scatter plot
data_swim_records %>%
  ggplot(aes(Year, Time)) +
  geom_point() + 
  ylim(c(0,85))

# create linear model 
swim.lm <- lm(Time ~ Year, data = data_swim_records)

# summary to find equation for regression line
parameters(swim.lm)

# plot line of best fit

data_predicted <- estimate_prediction(swim.lm)

plot(data_predicted)

# or
data_swim_records %>%
  ggplot(aes(Year,Time)) + 
  geom_point() + 
  ylim(c(0,85)) +
  geom_ribbon(data=data_fitted, aes(x= Year,  y=Predicted, ymin=CI_low, ymax=CI_high), alpha=0.2) +
  geom_line(data = data_predicted, aes(x = Year, y = Predicted))

```

**Q11:**

```{r}
# predict the winning time at the 2020 Olympics
estimate_prediction(swim.lm, data= tibble(Year=2020))

```

Q12:

```{r}
report_performance(swim.lm)
```

## Life expectancy vs infant mortality rate:

**Q14:**

```{r}
# read in data
data_UN_population <- read_csv("data/UNpopstats.csv")

# create two objects, one for females and one for males
data_UN_population.female <- data_UN_population %>%
  filter(Gender == "female")

data_UN_population.male <- data_UN_population %>%
  filter(Gender == "male")

# create model for each gender
UN.female.lm <- lm(LifeExp ~ InfMort, data = data_UN_population.female)
  
UN.male.lm <- lm(LifeExp ~ InfMort, data = data_UN_population.male)

# get summaries of models to see output
summary(UN.female.lm)

summary(UN.male.lm)
```

## The effect of study time on grades:

**Q17:**

```{r}
# create data table
data_student_grades <- 
  tibble(student_name = c("Jack", "Emma", "Aiden", "Sharon", "Gabriela"),
        hours_studied = c(6, 8.6, 8, 7, 4.2),
        grade = c(53, 84, 92, 71, 42))

# calculate mean hours studied, by passing data into report function
data_student_grades %>% report()

# create linear model
study.time.lm <- lm(grade ~ hours_studied, data = data_student_grades)

# check output
parameters(study.time.lm)
```

**Q19:**

```{r}
# study hours required to get 100% grade
# 100 = Hours*11.384 - 8.554
# Hours = (100 + 8.554)/11.384

(100 + 8.554)/11.384

estimate_prediction(study.time.lm, data = tibble(hours_studied = 9.5))
```

