---
title: "Week 3 Linear Models 2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Load packages

```{r}
library(tidyverse)
library(easystats)
```

## Boiling Point of water vs air pressure

**Q1:**

```{r}
# read in data
data_Hooker <- read.csv("data/Hooker.csv")

# plot graph of Temperature vs Pressure
data_Hooker %>%
  ggplot(aes(Pressure, Temperature)) +
  geom_point()

# create regression model of form: Temp = a + b*Press
Hooker.lm <- lm(Temperature ~ Pressure, data = data_Hooker)

# examine the assumptions 
check_model(Hooker.lm)

```

**Q2:**

```{r}
# remove outlier after confirming appropriate
data_Hooker_no.outliers <- slice(data_Hooker, -7)

# produce and check model with outlier removed
Hooker.lm_no.outlier <- lm(Temperature ~ Pressure, data = data_Hooker_no.outliers)

check_model(Hooker.lm_no.outlier)

# try a log transformation on the temperature and pressure data
data_Hooker <- 
  data_Hooker %>%
  mutate(logTemp = log10(Temperature),
         logPress = log10(Pressure))

# fit regression model using log-transformed variables
Hooker.lm.logdata <- lm(logTemp ~ logPress, data = data_Hooker)

fit.log <- estimate_prediction(Hooker.lm.logdata)

plot(fit.log)


# check residual plot 
check_model(Hooker.lm.logdata)
```

## Growth rate vs individual size

**Q4:**

```{r}
# load the data
data_growth.rate <- read_csv("data/GrowthRate.csv")

# plot growth rate against body size
data_growth.rate %>%
  ggplot(aes(GrowthRate, BodyWt)) +
  geom_point()


GR.lm <- lm(GrowthRate~BodyWt, data = data_growth.rate)

check_model(GR.lm)


```

**Q6:**

```{r}
# try transforming the predictor variable using log() and sqrt()
data_growth.rate <- data_growth.rate %>%
  mutate(logBodyWt = log(BodyWt),
         sqrtBodyWt = sqrt(BodyWt),
         logGrowthRate = log(GrowthRate),
         )

# re-plot the data using transformed variables
data_growth.rate %>%
  ggplot(aes(GrowthRate, logBodyWt)) +
  geom_point()

data_growth.rate %>%
  ggplot(aes(GrowthRate, sqrtBodyWt)) +
  geom_point()


GR.lm.log <- lm(GrowthRate~logBodyWt, data = data_growth.rate)

check_model(GR.lm.log)

GR.lm.loglog <- lm(logGrowthRate~logBodyWt, data = data_growth.rate)

check_model(GR.lm.loglog)

```

**Q7:**

```{r}
# try transforming the response variable too
data_growth.rate <- data_growth.rate %>%
  mutate(logGrowthRate = log(GrowthRate),
         sqrtGrowthRate = sqrt(GrowthRate))

# re-plot 
data_growth.rate %>%
  ggplot(aes(logGrowthRate, logBodyWt)) +
  geom_point()

data_growth.rate %>%
  ggplot(aes(sqrtGrowthRate, sqrtBodyWt)) +
  geom_point()

# fit linear model using log transformed variables
growth.rate.loglog.lm <- lm(logGrowthRate ~ logBodyWt, data = data_growth.rate)

# check model
check_model(growth.rate.loglog.lm)

```

## Brain weight vs body size

```{r}
# read in data
data_brain <- read_csv("data/Brain.csv")

# plot brain weight vs body weight
data_brain %>%
  ggplot(aes(BodyWt, BrainWt)) +
  geom_point()

# plot a histogram of each variable to check normality and variance
data_brain %>%
  ggplot(aes(BodyWt)) +
  geom_histogram()

data_brain %>%
  ggplot(aes(BrainWt)) +
  geom_histogram()

# create a linear model
brain.body.lm <- lm(BrainWt ~ BodyWt, data = data_brain)

# check output
report(brain.body.lm)
```

**Q8:**

```{r}
# try different transformations so that the regression is linear
data_brain <- data_brain %>%
  mutate(
    logBrainWt = log(BrainWt),
    logBodyWt = log(BodyWt),
    sqrtBrainWt = sqrt(BrainWt),
    sqrtBodyWt = sqrt(BodyWt)
  )

data_brain %>%
  ggplot(aes(logBrainWt, logBodyWt)) +
  geom_point()

data_brain %>%
  ggplot(aes(sqrtBrainWt, sqrtBodyWt)) +
  geom_point()

data_brain %>%
  ggplot(aes(logBrainWt, BodyWt)) +
  geom_point()

data_brain %>%
  ggplot(aes(sqrtBrainWt, BodyWt)) +
  geom_point()
```

**Q9:**

```{r}
# re-create the linear model
log.brain.body.lm <- lm(logBrainWt ~ logBodyWt, data = data_brain)

# check output
report(log.brain.body.lm)

# check model
check_model(log.brain.body.lm)

```

## Body size vs fecundity

**Q11:**

```{r}
# load amphipod data
data_amphipods <- read_csv("data/Amphipod_fecundity.csv")

# check assumptions
data_amphipods %>%
  ggplot(aes(Length, Eggs)) +
  geom_point()

# fit linear model
amphipods.lm <- lm(Eggs ~ Length, data = data_amphipods)

report(amphipods.lm)

# check residuals

# check model
check_model(amphipods.lm)

# how many more eggs for every 1mm increase?
# linear model: Eggs = 5.639*x - 25.133
# 5.639 per mm increase
# OR: can substitute two Length values (e.g. 1mm and 2mm) and take the difference to determine change per 1mm
(5.639*2 - 25.133) - (5.639*1 - 25.133) 


# predict number of eggs for a 10mm female
estimate_prediction(amphipods.lm, data = tibble(Length = 10))
```

## Fish recruitment

**Q12:**

```{r}
# load data
data_riverflow <- read_csv("data/riverflow.csv")

# plot larvae against flow rate to check linearity
data_riverflow %>%
  ggplot(aes(Flow.rate, Larvae.density)) +
  geom_point()

# check normality of data
data_riverflow %>%
  ggplot(aes(Larvae.density)) +
  geom_histogram()

# try transforming variables
data_riverflow <- data_riverflow %>%
  mutate(
    logFlow = log(Flow.rate),
    sqrtFlow = sqrt(Flow.rate),
    logLarvae = log(Larvae.density),
    sqrtLarvae = sqrt(Larvae.density)
  )

data_riverflow %>%
  ggplot(aes(Flow.rate, logLarvae)) +
  geom_point()

data_riverflow %>%
  ggplot(aes(sqrtFlow, Larvae.density)) +
  geom_point()

data_riverflow %>%
  ggplot(aes(logFlow, logLarvae)) +
  geom_point()

# fit model
riverflow.lm <- lm(Larvae.density ~ Flow.rate, data = data_riverflow)

# interpret results
report(riverflow.lm)

# check model
check_model(riverflow.lm)

# how many more larvae for every unit increase in flow?
# linear model: Larvae.density = -3.1348*x + 7.4904
# = -3.1348 fewer larvae
# OR substitute two Length values (e.g. 1 and 2) and take the difference to determine change per unit
(-3.1348*2 + 7.4904) - (-3.1348*1 + 7.4904)
```

## Koala numbers under control fire practices

**Q13:**

```{r}
# read in data
data_koalas <- read_csv("data/koalas.csv")

# check values
data_koalas %>% 
  ggplot(aes(Year.last.fire, Koalas)) +
  geom_point()

data_koalas %>%
  ggplot(aes(Koalas)) +
  geom_histogram()

# fit linear model
koalas.lm <- lm(Koalas ~ Year.last.fire, data = data_koalas)

# interpret results
report(koalas.lm)
```
