---
title: Week 1 - working with R
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)

# remotes::install_github("numbats/moodlequiz")
library(moodlequiz)
```

# R Basics

Learning to code in R is like learning to speaking a new language. Here we will go through some conventions and common vocabulary used in R. With practice, these will become familiar and intuitive! 

## Code vs Comments

Think of the code you will write in this course as instructions. Each time you tell R to run or **"execute"** your code, R will interpret your instructions and do stuff accordingly. Try running these few lines of code. Notice how each line with spit out or "return" a solution. 

```{r}
6 + 3 
100 * 5
(8651 - 734) / (4 * 9)

```

Much like a calculator, R uses **operators** like +, -, *, / to do maths. The brackets ( ) are used to group together some calculations and set the order of operations. 

As we write code in this course, its often useful to add **comments** throughout our code to give it some context. Comments help organise your thoughts and serve as a reminder to you and your collaborators of what is happening in your code script. Here I've added some comments to the code above. Run the following code, what do you notice when the comments are run?


```{r}
6 + 3 # Addition

100 * 5 # Subtraction

(8651 - 734) / (4 * 9) # Some complicated math
```

**R reads the comment and does nothing**

## Useful operators

There are 3 handy operators that you will come across often. First, is the "help operator" represented by `?`. This is useful when you are stuck, you can use it to bring up a help file to learn more about something. As an example, run the next bit of code. 

```{r}
?`+`
```

What information gets pulled up by calling `?+`

**The help file for 'Arithmetic Operators'**

The next useful operator is. the "assignment" operator `<-`. Its used for creating objects in R. It looks like an arrow right? Think of it as inserting the code on the back of the arrow (right hand side) into the object on the pointy end of the arrow (left hand side). 


```{r}
my_lucky_number <- 13 # Insert the value 13 into the object my_lucky_number
my_lucky_number
```

Some folks like to use `=` instead of `<-` to assign things in R, this is a matter of personal preference - but its good practice to choose style and be consistent throughout. See for yourself! Change the `<-` to a `=` in the code above and input a different lucky number. Did it work? 

```{r}
my_lucky_number = 31 # Insert the value 13 into the object my_lucky_number
my_lucky_number
```

When creating objects in R, there are few general rules naming things. Object names:

1\) should only contain letters, numbers, and only dot or underscore characters e.g. `river-data-2005`

2\) should **not** start with a number (e.g. `3obj`), a dot followed by a number (e.g. `.3obj`), or an underscore (e.g. `_obj`)

3\) should **not** be a reserved keyword in R (e.g. `for`, `in`, `repeat`, `while`, etc.) (for more reserved keywords see `?reserved`).

**Try:** Try creating some objects, storing either a single number or even words!

## Functions

Another common feature you will use in R are **"functions"**. These are in-built code that performs a specific task.
For example, `c()` is function used to **combine multiple values** into one object and `mean()` is a function that calculates the average of a series of numbers. 

```{r}
x <- c(1,2,3,4,5)

mean(x)
```

**Try:** Join another set of numbers to x and compute the mean

```{r}
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)

z <- c(x, y)

mean(z)
```

Functions have **"arguments"**, these are **inputs** to a function that is needed to perform it's task. Think of these as the various settings of a coffee machine. Take a look at the help file for the function `mean()`. 

Ignoring the `...`, what are the other arguments of the `mean()` function? `r cloze("x, trim, na.rm", c("x, y, z", "temperature, grind, pressure", "x, trim, na.rm"))`.

Notice how trim is set to 0 and `na.rm` is set to FALSE. These are what we call **default values**. We can change these to adjust the behaviour of a function. Take this next example, I've added a NA in a series of numbers. NA represents a missing value. Try taking a mean of x


```{r}
x <- c(1,2,3,4,5, NA, 7, 8, 9) # Add a missing value

mean(x, na.rm = FALSE)
```

R didn't like that right? Try adjusting the value for the `na.rm` argument so you can take a mean of a series of number where a missing value is present.

```{r}
x <- c(1,2,3,4,5, NA, 7, 8, 9) # Add a missing value

mean(x, na.rm = TRUE)
```

## Data types in R 

R has its unique way of classifying data. Data types are fundamental to working with data in R as they are the entities you will be dealing with regularly.

There are 4 common data types in R: 

- character   `"calico"`
- numeric      
    - double - numbers containing decimals `197.32` (default for all numbers in R)      
    - integer - whole numbers  `5L` (the `L` tells R explicitly that 5 is a whole number)
- logical     `TRUE FALSE`
- complex     `1+4i 2+7i`

**Try:** use the functions `class()`, `typeof()`, `str()` to figure out what type of data you are working with below

```{r}
cats <- c("calico", "tabby", "black") # Character 
water_ml <- c(200.34, 190.57, 195.83, 197.32) # Numeric - double
number_of_houses <- c(5L, 1L, 6L, 8L, 10L)
went_for_a_walk <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)
space_numbers <- c(1+4i, 2+7i, 3+8i)

class(cats)
typeof(number_of_houses)
str(went_for_a_walk)
```

## Object types in R

Some far we have been working with **vectors**. They are the simplest object in. `cats`, `water_ml`, `went_for_a_walk` are one dimension and contains series of data. 

**Data frame** is data stored in a table. Think of these like a single spreadsheet, grid of rows and columns. Usually variables (the attributes you are interested in) are arranged as columns and observations for each entity you are collecting data for are arranged as rows. Take a look at the data frame `mtcars` and the help file for `mtcars`. 

```{r}
mtcars
```

**What data type is `cyl`?** numeric but technically an integer
**What data type is `wt`?** numeric but technically a double
**How many variables are there in `mtcars`?** 11
**How many obsevations are there in `mtcars`?** 32

**Try:** The `dim()` function to answer the last two questions efficiently

```{r}
dim(mtcars)
```

**You can select a variable within your data frame using the `$` operator. Give it a go!**

Another common and object data type is **list**. Lists are objects which can contain a mix of elements, which makes them very flexible.

We create lists using the `list()` function. Here I am creating a list and giving each **element** of my list a name (`car_data`, `cat_types`, `did_i_go_for_a_walk`). Notice I am using the `=` here to store objects into element. 

```{r}
cats <- c("calico", "tabby", "black") 
went_for_a_walk <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)

useful_info <- list(car_data = mtcars, # first element
                    cat_types = cats, # second element
                    did_i_go_for_a_walk = went_for_a_walk) # third element
```

Like a variable in a data frame, you can access a particular **element** using the `$` operator. Give it a go!

**What happens when you don't provide a name to an element?** The element is unnamed and R gives it a number

## Visualising your data

Now that you have the basics under your belt, let's try looking at our data using plots! We will be using functions from an R package called `ggplot2`. R packages contain functions that are not shipped in the base version of R. There are MANY R packages out there, this is the beauty of R. Over time, you will find tools or R packages you like you use and add to your data science tool belt.

To make use `ggplot2` we need to first "load" its library into R using the `library()` function. 

Here we are creating a boxplot of number of cylinders by weight of the car. We want to know if cars whether the weight of a car varies with the number cyclinder it has. 

Let's walk through the code first: 

- `ggplot(data = mtcars)` tells `ggplot`, that we are working with the mtcars data frame
- `aes()` is short **aesthetics**, within this function is where we tell `ggplot` what variables we want to work with.
  - `x = cyl` tells the function that we want to place `cyl` on the x axis 
  - `y = wt` tells the function that we want to place `wt` on the y axis 
  - `group = cyl` tells the function that we want to treat `cyl` as a grouping variable. This means we want to compare between cars with different number of cylinders (4, 6, 8)

```{r}
library(ggplot2)

ggplot(data = mtcars, aes(x = cyl, y = wt, group = cyl)) +  # Specify the data, the x-variable and the y-variable
  geom_boxplot() # create boxplot
```

Now take a look at the plot, what pattern do you see? 

**Cars with more cylinders tend to weigh more than cars with fewer cylinders.**

How does mileage `mpg` vary between different transmissions `am`? What would the `ggplot` code look like? 

```{r}
library(ggplot2)

ggplot(data = mtcars, aes(x = `r cloze("am", colnames(mtcars))`, y = `r cloze("am", colnames(mtcars))`, group = `r cloze("am", colnames(mtcars))`)) +  # Specify the data, the x-variable and the y-variable
  geom_boxplot() # create boxplot
```

Change the code above and see for yourself! 

```{r}
library(ggplot2)

ggplot(data = mtcars, aes(x = am, y = mpg, group = am)) +  # Specify the data, the x-variable and the y-variable
  geom_boxplot() # create boxplot
```

**Manual cars tend to have higher mileage.** 

