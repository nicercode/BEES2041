---
title: "Mixed models"
format:
  html:    
    self-contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Set the working directory
rprojroot::has_file("BEES2041-code.Rproj") |>
  rprojroot::find_root() |>
  file.path("week 5/Wk5-2-moodle") |>
  setwd()

# remotes::install_github("numbats/moodlequiz")
library(moodlequiz)

# For prac
library(tidyverse)
library(easystats)
library(glmmTMB)
```

<!-- # Outline -->
<!-- - Fixed and Random effects -->
<!-- - How to construct a model forumula -->
<!--   - varying intercepts -->
<!--   - varying slopes -->
<!-- - How to choose to suit question -->


# Introduction to Mixed Models

![Bringing all your R skills together!](images/witches.png){width=60%}

## Introduction

Hey folks! In many real-world datasets, our observations are not entirely independent â€” measurements might be grouped by subjects, locations, time points, or experimental units. Ignoring this structure can lead to biased estimates and misleading results. **Mixed models** (also known as linear mixed-effects models) help us handle this complexity by explicitly modeling both fixed effects â€” the overall trends we're interested in â€” and random effects â€” the variation due to these groupings.

Today, we will go through  XXXX: 

> 

## Mixed Model assumptions




## Key learning objectives

Our learning objectives today are:

- **understand** how different predictor variable types can influence your choice of analysis 
- **understand** difference between additive and interactive effects
- **run** a multiple linear regression in R using `lm()`
- **test** for effects of your predictor variables using `anova()`
- **interpret** the output of your multiple regression using `parameters()`, `estimate_means()`, `estimate_contrasts()`
- **extract** the mean and confidence interval for the slope and intercept of the regression line
- **plot** the data and the regression line with confidence intervals

Letâ€™s dive in! ðŸš€ 

## Setting up: Materials

Everything you need for this prac is on Moodle

1. Download this week's materials zip file from Moodle, from the course page
2. Unzip the file by: 
  - MacOS: Double clicking the zipfile 
  - Windows: Right click on the zip file and click "Extract All" 
3. Move the extracted folder into the folder where you store materials for `BEES2041/` 
4. **Click on the Rstudio project file, eg. `Wk5-2-mixed-models.Rproj`** to open the RStudio project and you're in!!!

We will be working with various datasets collected. These are in the folder `data/`.

You will work in the relevant Quarto document for this prac. Within each Quarto docs there are several challenges for you to complete on your own devices in order to **answer the questions on Moodle**.

## Setting up: Packages

> **Note** that when running R in the browser we need to install the packages each time we start a new session or after you've checked your answers. We're only going to install the parts of `tidyverse` and `easystats` we need for this prac.

```{r, eval=FALSE}
# install.packages("tidyverse")
# install.packages("easystats")
# install.packages("patchwork")
# install.packages("glmmTMB")
```

> Remember to load the packages into R to use em!

```{r, results='hide', warning=FALSE, message=FALSE}
library(tidyverse)
library(easystats)
library(patchwork)
library(glmmTMB)
```

## Worked Example: Urchins

![**Urchin grazing**](images/Urchins.jpg){width=60%}

Already, you have seen how linear models can analyse data with continuous predictor variables (regression) and categorical predictor variables (ANOVA), but they can also use a combination of categorical and continuous variables. These are known as **analyses of covariance** (**ANCOVA**). 

These models can get as complex as you like, but we will look at the simplest version of these - let's look at thesimplest scenario: a model with **one categorical and one continuous predictor**.

To explore this analysis, let's look at some data from marine researchers in BEES who were studying sea urchins at Bare Island near the opening of Botany Bay ([Wright et al. 2005](http://www.int-res.com/abstracts/meps/v298/p143-156/)). Urchins are voracious grazers and at high densities can remove entire kelp forests and leave bare areas known as urchin barrens. 

**These researchers wanted to know: "How do urchin densities affect algal cover over time?"**

To study how urchins affect the communities on the rocky reef, researchers set up five experimental treatments on the sea floor:

- cages that enclosed a high density of urchins
- cages that enclosed a low density of urchins
- cages with no urchins (cage control)
- cages with no urchins and no top (open cage)
- control plots with no manipulation.
 
There were 8 replicates per treatment. The % cover of algae and bare rock were measured several times over a 210-day experiment.

The following file has the data for the % cover of bare rock, `data/Urchins.csv`

Read this data in and save it as an object. We're also going to log transform the y vaiable (`BareRock`) as it is a percentage and will be right skewed. (If you like, you can check this by fitting a simple model and checking the fit.)


```{r}
# Read in data 
data_urchins <- read_csv("data/Urchins.csv")  |> 
  mutate(
    Quadrat = as.factor(Quadrat),
    logBareRock = log(BareRock + 1)
  )
```

```{r}
fit <- lm(BareRock ~ Day*Treatment, data = data_urchins)

check_model(fit)

# neeeds a log transofrm
data_urchins <- data_urchins |>  mutate(logBareRock = log(BareRock + 1))

fit_log <- lm(logBareRock ~ Day * Treatment, data = data_urchins)

check_model(fit_log)

parameters(fit_log)

anova(fit_log)
```

```{r}
means <- estimate_means(fit_log, by = c("Day", "Treatment"))

p1 <-
  ggplot(means, aes(x = Day, y = Mean, color = Treatment)) +
  geom_line() +
  labs(
    x = "Day",
    y = "log(BareRock)"
  ) +
  theme_minimal()

# Compare lines
p1

# Compare lines with data
p1 +
  geom_point(data = data_urchins, aes(y = logBareRock)) +
  facet_wrap(~Treatment)
```

Add a random effect for Quadrat

```{r}
fit <- glmmTMB(logBareRock ~ Day + Treatment + Day:Treatment +  (1 | Quadrat), data = data_urchins)

check_model(fit)

means <- estimate_expectation(fit, by = c("Day", "Treatment"))
means2 <- estimate_expectation(fit)

p1 <-
  ggplot(means2, aes(x = Day, y = Predicted, color = Treatment)) +
  geom_line(aes(group = Quadrat), alpha = 0.5, size = 0.5) +
  labs(
    x = "Day",
    y = "log(BareRock)"
  ) +
  theme_minimal() +
  geom_line(data = means, alpha = 1, linewidth = 2)

p1

# Plot for each treatmeant
p1 +
  geom_point(data = data_urchins, aes(y = logBareRock)) +
  facet_wrap(~Treatment)

# Plot for each Quadrat
p1 +
  geom_point(data = data_urchins, aes(y = logBareRock)) +
  facet_wrap(~Quadrat)

parameters(fit_simple)
parameters(fit)

## Ignoring qudrat adds to noise
## CI's are smaller with the random effect included
```

## Example: Estuaries

You will need to use mixed effect models if you have a random factor in your experimental design. A random factor is categorical
has a large number of levels only a random subsample of levels is included in your design you want to make inference in general, and not only for the levels you observed.

This is a tough concept to get your head around, and is best explained with an example. The data we will analyse here are counts of invertebrates at 3-4 sites in each of 7 (randomly chosen) estuaries. Here the estuaries are the random effect, as there are a large number of possible estuaries, and we only sample from a random few of them, but we would like to make inference about estuaries in general.

```{r}
data_estuaries <- read_csv("data/Estuaries.csv")

data_estuaries
```

```{r}
data_estuaries |> 
  count(Modification, Estuary)
```

```{r}
# ft.estu <- lme4::lmer(Total ~ Modification + (1 | Estuary), data = data_estuaries, REML = T)
# ft.estu.0 <- lmer(Total ~ (1 | Estuary), data = data_estuaries, REML = F)

fit_estuaries <- glmmTMB(Total ~ Modification + (1 | Estuary), data = data_estuaries)
```

```{r}
# Does not support glmmTMB - yet still produces output??
check_model(fit_estuaries) 


estimate_contrasts(fit_estuaries)
means_by_mod_estuaries <- estimate_expectation(fit_estuaries) # ??? Some levels missing?? 

means_by_estuaries_mod <- means_by_mod_estuaries |>  select(Modification, Estuary, Predicted, starts_with("CI")) |> 
  distinct()

means_by_estuaries <- estimate_means(fit_estuaries, by = c("Modification", "Estuary")) # all possible combinations 
```

```{r}
ggplot(data_estuaries, aes(x = Estuary, y = Total, colour = Modification)) +
  geom_errorbar(data = means_by_mod_estuaries, 
                aes(x = Estuary, y = Predicted, ymin = CI_low, ymax = CI_high),
                width = 0.15,
                col = "azure4") +
  geom_violin(fill = NA) +
  geom_jitter(width = 0.3, alpha = 0.5) + 
  geom_point(data = means_by_estuaries, aes(y = Predicted), colour = "azure4", size = 2) + 
  scale_color_manual(values = c("burlywood4", "cadetblue")) + 
  theme_classic() + 
  facet_grid(~Modification, scales = "free")
```

**Questions:**

1.
2.
3.

# Crossed/Nested designs

## Worked Example: 

Many experimental designs in ecology and environmental sciences require mixed models with several random effects (factors). You might have heard of nested and crossed factors. We often define these as quite distinct designs (e.g., from www.theanalysisfactor.com)

Two factors are crossed when every category (level) of one factor co-occurs in the design with every category of the other factor. In other words, there is at least one observation in every combination of categories for the two factors.

A factor is nested within another factor when each category of the first factor co-occurs with only one category of the other. In other words, an observation has to be within one category of Factor 2 in order to have a specific category of Factor 1. All combinations of categories are not represented.

There are also intermediate designs that are partially crossed, where some levels of one factor occur in several (but not all) levels of the second factor. These designs have often been taught as separate problems with different ways to carry out analyses of variance (ANOVAs) depending on if you have crossed or nested factors. Using mixed models with the package lme4, we can think if all of these in one framework, where nested and crossed designs are modelled in the same way. Thinking about factors as crossed or nested is simplified to careful labelling of factor levels - more on this later.

Fitting a model with a fixed effect and several random effects

In this data set, we have a fixed effect (Modification; modified vs pristine) and two random effects (Estuary and Site). Site is nested within Estuary as each site can only belong in one estuary. When entering the data, however, weâ€™ve been careless and numbered sites within each estuary as 1, 2, 3 etc.

Estuary JAK and estuary JER each have sites numbered 1, even though these sites are not connected in any way. We can also see this in the cross tabulation xtabs. This site labelling looks crossed, where each site occurs in each estuary, rather than nested.

We can fix this by simply telling R that Site is nested in Estuary. It is best practice, however, to do this at the data entry stage. If things are the same, then they should be labelled the same, and if they are not they should be labelled differently.

```{r}
data_estuaries |> 
  count(Modification, Estuary, Site) |> 
  print(n = 100)
```

Create a nested Estuary_Site variable

```{r}

```

